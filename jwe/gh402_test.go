package jwe_test

import (
	"testing"

	"github.com/lestrrat-go/jwx/internal/json"
	"github.com/lestrrat-go/jwx/jwa"
	"github.com/lestrrat-go/jwx/jwe"
	"github.com/stretchr/testify/assert"
)

// Pin represents the structured clevis data which can be used to decrypt the jwe message
type Pin struct {
	Pin     string      `json:"pin"`
	Tang    *TangPin    `json:"tang,omitempty"`
	Tpm2    *Tpm2Pin    `json:"tpm2,omitempty"`
	Sss     *SssPin     `json:"sss,omitempty"`
	Yubikey *YubikeyPin `json:"yubikey,omitempty"`
}

type TangPin struct {
	Advertisement *json.RawMessage `json:"adv,omitempty"`
	URL           string           `json:"url"`
}

type Tpm2Pin struct {
	Hash    string `json:"hash,omitempty"`
	Key     string `json:"key,omitempty"`
	JwkPub  string `json:"jwk_pub,omitempty"`
	JwkPriv string `json:"jwk_priv,omitempty"`
	PcrBank string `json:"pcr_bank,omitempty"`
	PcrIds  string `json:"pcr_ids,omitempty"`
}

type SssPin struct {
	Jwe       []string `json:"jwe"`
	Threshold int      `json:"t"`
	Prime     string   `json:"p"`
}

type YubikeyPin struct {
	Type      string     `json:"type"`
	Challenge string     `json:"chalelenge"`
	Slot      int        `json:"slot"`
	Kdf       YubikeyKdf `json:"kdf"`
}

type YubikeyKdf struct {
	Type       string `json:"type"`
	Hash       string `json:"hash"`
	Iterations int    `json:"iter"`
	Salt       string `json:"salt"`
}

func TestGH402(t *testing.T) {
	key := []byte{195, 170, 42, 171, 98, 176, 98, 162, 57, 170, 62, 69, 175, 209, 200, 151, 81, 135, 63, 43, 93, 20, 16, 111, 13, 26, 138, 188, 15, 19, 26, 242}
	data := "..zz3fUXsiaME2cSoy.LTQovHUvDP4MXT2_sHgf_cM2gicobD5kGXEl5eY.MK3Lf6IwaoVUvCTp1Q5VOA"

	decrypt := func(customField bool) {
		t.Helper()
		m := jwe.NewMessage()
		plain, err := jwe.Decrypt([]byte(data), jwa.DIRECT, key, jwe.WithMessage(m))
		if !assert.NoError(t, err, `jwe.Decrypt should succeed`) {
			return
		}
		if string(plain) != "testing Shamir Secret Sharing" {
			t.Errorf("expected 'testing Shamir Secret Sharing', got %s", string(plain))
			return
		}

		if customField {
			v, ok := m.ProtectedHeaders().Get("clevis")
			if !assert.True(t, ok, `m.Get("clevis") should be true`) {
				return
			}

			if !assert.IsType(t, Pin{}, v, `result of m.Get("clevis") should be an instance of Pin{}`) {
				return
			}
		}
	}
	decrypt(false)

	// register field deserialized and run decryption again
	jwe.RegisterCustomField("clevis", Pin{})
	decrypt(true) // used to fail before, but this should pass
}
