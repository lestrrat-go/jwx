// This file is auto-generated by internal/cmd/genoptions/main.go. DO NOT EDIT

package jwe

import (
	"github.com/lestrrat-go/jwx/jwa"
	"github.com/lestrrat-go/option"
)

type Option = option.Interface

// DecryptOption describes options that can be passed to `jwe.Decrypt`
type DecryptOption interface {
	Option
	decryptOption()
}

type decryptOption struct {
	Option
}

func (*decryptOption) decryptOption() {}

// EncryptOption describes options that can be passed to `jwe.Encrypt`
type EncryptOption interface {
	Option
	encryptOption()
}

type encryptOption struct {
	Option
}

func (*encryptOption) encryptOption() {}

type identCompress struct{}
type identContentEncryptionAlgorithm struct{}
type identKey struct{}
type identMessage struct{}
type identPostParser struct{}
type identPretty struct{}
type identPrettyFormat struct{}
type identProtectedHeaders struct{}
type identRecipientHeaders struct{}
type identSerialization struct{}

func (identCompress) String() string {
	return "WithCompress"
}

func (identContentEncryptionAlgorithm) String() string {
	return "WithContentEncryption"
}

func (identKey) String() string {
	return "WithKey"
}

func (identMessage) String() string {
	return "WithMessage"
}

func (identPostParser) String() string {
	return "WithPostParser"
}

func (identPretty) String() string {
	return "WithPretty"
}

func (identPrettyFormat) String() string {
	return "WithPrettyFormat"
}

func (identProtectedHeaders) String() string {
	return "WithProtectedHeaders"
}

func (identRecipientHeaders) String() string {
	return "WithRecipientHeaders"
}

func (identSerialization) String() string {
	return "WithCompact"
}

// WithCompress specifies the compression algorithm to use when encrypting
// a payload using `jwe.Encrypt` (Yes, we know it can only be "" or "DEF",
// but the way the specification is written it could allow for more options,
// and therefore this option takes an argument)
func WithCompress(v jwa.CompressionAlgorithm) EncryptOption {
	return &encryptOption{option.New(identCompress{}, v)}
}

// WithContentEncryptionAlgorithm specifies the algorithm to encrypt the
// JWE message content with. If not provided, `jwa.A256GCM` is used.
func WithContentEncryption(v jwa.ContentEncryptionAlgorithm) EncryptOption {
	return &encryptOption{option.New(identContentEncryptionAlgorithm{}, v)}
}

// WithMessage provides a message object to be populated by `jwe.Decrpt`
// Using this option allows you to decrypt AND obtain the `jwe.Message`
// in one go.
//
// Note that you should NOT be using the message object for anything other
// than inspecting its contents. Particularly, do not expect the message
// reliable when you call `Decrypt` on it. `(jwe.Message).Decrypt` is
// slated to be deprecated in the next major version.
func WithMessage(v *Message) DecryptOption {
	return &decryptOption{option.New(identMessage{}, v)}
}

// WithCompact specifies that the result of `jwe.Encrypt()` is serialized in
// compact format.
//
// By default `jwe.Encrypt()` will opt to use compact format, so you usually
// do not need to specify this option other than to be explicit about it
func WithCompact() EncryptOption {
	return &encryptOption{option.New(identSerialization{}, fmtCompact)}
}
